// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v6.30.1
// source: proto/validate-token.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "tokenValidation";

export interface TokenValidationRequest {
  token: string;
}

export interface TokenValidationResponse {
  isValid: boolean;
  userId: string;
  role: string;
}

export const TOKEN_VALIDATION_PACKAGE_NAME = "tokenValidation";

export interface TokenValidationServiceClient {
  validateToken(request: TokenValidationRequest): Observable<TokenValidationResponse>;
}

export interface TokenValidationServiceController {
  validateToken(
    request: TokenValidationRequest,
  ): Promise<TokenValidationResponse> | Observable<TokenValidationResponse> | TokenValidationResponse;
}

export function TokenValidationServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["validateToken"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("TokenValidationService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("TokenValidationService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const TOKEN_VALIDATION_SERVICE_NAME = "TokenValidationService";
